package org.tempuri;

import com.microsoft.schemas._2003._10.serialization.arrays.ArrayOfint;

import com.microsoft.schemas._2003._10.serialization.arrays.ArrayOfstring;

import java.io.File;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import javax.xml.bind.JAXB;
import javax.xml.bind.JAXBElement;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;

import javax.xml.transform.stream.StreamResult;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.handler.MessageContext;

import org.datacontract.schemas._2004._07.landmark_classes.ArrayOfSpot;
import org.datacontract.schemas._2004._07.landmark_classes.Spot;
import org.datacontract.schemas._2004._07.landmark_parameters.ArrayOfFilterDateTime;
import org.datacontract.schemas._2004._07.landmark_parameters.DaysOfWeek;
import org.datacontract.schemas._2004._07.landmark_parameters.FilterDateTime;
import org.datacontract.schemas._2004._07.landmark_parameters.Interactivity;
import org.datacontract.schemas._2004._07.landmark_parameters.SpotListFilter;
import org.datacontract.schemas._2004._07.landmark_parameters.SpotListFilterCriteria;
// This source file is generated by Oracle tools.
// Contents may be subject to change.
// For reporting problems, use the following:
// Generated by Oracle JDeveloper 12c 12.1.3.0.0.1047
public class BasicHttpBinding_ILandmarkSpotsSpotClient {
    public static void main(String[] args) {
        String lsQNameXML = "";
        LandmarkSpotsSpot landmarkSpotsSpot = new LandmarkSpotsSpot();
        ILandmarkSpotsSpot iLandmarkSpotsSpot = landmarkSpotsSpot.getBasicHttpBindingILandmarkSpotsSpot();
        // Add your code to call the desired methods.
        SpotListFilter spotListFilter = new SpotListFilter();
        
        spotListFilter.setAlternateSchedule(0);
        
        ArrayOfint loObjAs = new ArrayOfint();
        List<Integer> laObjsAs = new ArrayList<Integer>();
        //laObjsAs.add(1);
        loObjAs.setInt(laObjsAs);
        JAXBElement<ArrayOfint> laAs = 
            new JAXBElement<ArrayOfint>(new QName(lsQNameXML, "AlternateSchedules"),ArrayOfint.class,loObjAs);
        spotListFilter.setAlternateSchedules(laAs);
        
        spotListFilter.setBonusSpot(false);
        
        JAXBElement<String> loBreakType = 
            new JAXBElement<String>(new QName(lsQNameXML, "BreakType"),String.class, "CO");
        spotListFilter.setBreakType(loBreakType);
        
        ArrayOfint loObjBa = new ArrayOfint();
        List<Integer> laObjsBa = new ArrayList<Integer>();
        //laObjsBa.add(1);
        loObjBa.setInt(laObjsBa);
        JAXBElement<ArrayOfint> laBusinessArea = 
            new JAXBElement<ArrayOfint>(new QName(lsQNameXML, "BusinessAreas"),ArrayOfint.class,loObjBa);
        spotListFilter.setBusinessAreas(laBusinessArea);
        
        ArrayOfint loObj = new ArrayOfint();
        List<Integer> laObjs = new ArrayList<Integer>();
        laObjs.add(1);
        laObjs.add(2);
        laObjs.add(3);
        laObjs.add(4);
        loObj.setInt(laObjs);
        JAXBElement<ArrayOfint> laBusinessTypes = 
            new JAXBElement<ArrayOfint>(new QName(lsQNameXML, "BusinessTypes"),ArrayOfint.class,loObj);
        spotListFilter.setBusinessTypes(laBusinessTypes);
        
        JAXBElement<String> loCallerOrganisationCode = 
            new JAXBElement<String>(new QName(lsQNameXML, "CallerOrganisationCode"),String.class, "TL");
        spotListFilter.setCallerOrganisationCode(loCallerOrganisationCode);
        
        JAXBElement<String> loCallerPositionCode = 
            new JAXBElement<String>(new QName(lsQNameXML, "CallerPositionCode"),String.class, "TRN07");
        spotListFilter.setCallerPositionCode(loCallerPositionCode);
        
        ArrayOfint loObjCa = new ArrayOfint();
        List<Integer> laObjsCa = new ArrayList<Integer>();
        //laObjsCa.add(1);
        loObjCa.setInt(laObjsCa);
        JAXBElement<ArrayOfint> laCampaigns = 
            new JAXBElement<ArrayOfint>(new QName(lsQNameXML, "Campaigns"),ArrayOfint.class,loObjCa);
        spotListFilter.setCampaigns(laCampaigns);
        
        ArrayOfstring loObjClash = new ArrayOfstring();
        List<String> laObjsClash = new ArrayList<String>();
        //loObjClash.add(1);
        loObjClash.setString(laObjsClash);
        JAXBElement<ArrayOfstring> laClash = 
            new JAXBElement<ArrayOfstring>(new QName(lsQNameXML, "ClashCodes"),ArrayOfstring.class,loObjClash);
        spotListFilter.setClashCodes(laClash);
        
        ArrayOfstring loClients = new ArrayOfstring();
        List<String> laClients = new ArrayList<String>();
        //loObjClash.add(1);
        loClients.setString(laClients);
        JAXBElement<ArrayOfstring> laClientsJax = 
            new JAXBElement<ArrayOfstring>(new QName(lsQNameXML, "Clients"),ArrayOfstring.class,loClients);
        spotListFilter.setClients(laClientsJax);
        
        
        spotListFilter.setConvDemographicNumber(0);
        
        spotListFilter.setCopyCode(0);
        spotListFilter.setCopyProcess(-1);
        
        JAXBElement<String> loCurrency = 
            new JAXBElement<String>(new QName(lsQNameXML, "Currency"),String.class, "MXN");
        spotListFilter.setCurrency(loCurrency);
        
        ArrayOfint loObjDeals = new ArrayOfint();
        List<Integer> laObjsDeals = new ArrayList<Integer>();
        //laObjsCa.add(1);
        loObjDeals.setInt(laObjsDeals);
        JAXBElement<ArrayOfint> laDeals = 
            new JAXBElement<ArrayOfint>(new QName(lsQNameXML, "Deals"),ArrayOfint.class,loObjDeals);
        spotListFilter.setDeals(laDeals);
        
        spotListFilter.setDemographicNumber(-1);
        
        ArrayOfstring loObjDesCod = new ArrayOfstring();
        List<String> laObjsDesCod = new ArrayList<String>();
        loObjDesCod.setString(laObjsDesCod);
        JAXBElement<ArrayOfstring> laDesCod = 
            new JAXBElement<ArrayOfstring>(new QName(lsQNameXML, "DiscountCodes"),ArrayOfstring.class,loObjDesCod);
        spotListFilter.setDiscountCodes(laDesCod);
        
        spotListFilter.setEfficiencyHigh(new Float(0));
        spotListFilter.setEfficiencyLow(new Float(0));
        
        spotListFilter.setExcludeRatingsData(false);
        
        //SpotListFilterCriteria laSlfc = new SpotListFilterCriteria("GetBySalesArea");
        //SpotListFilterCriteria laSlfc = 1;
        spotListFilter.setFilterCriteria(SpotListFilterCriteria.GET_BY_SALES_AREA);
        
        ArrayOfFilterDateTime laFdt = new ArrayOfFilterDateTime();
        List<FilterDateTime> filterDateTime = new ArrayList<FilterDateTime>();
        FilterDateTime loUno = new FilterDateTime();
        loUno.setDaysOfWeek(DaysOfWeek.ALL_DAYS);
                
        SimpleDateFormat simpleDateFormat=new SimpleDateFormat("yyyy-MM-dd");
        Date date;
        try {
            date = simpleDateFormat.parse("2018-11-08");
            GregorianCalendar gc=new GregorianCalendar();
            gc.setTime(date);
            XMLGregorianCalendar xml = DatatypeFactory.newInstance().newXMLGregorianCalendar(gc);
            //xml.setTimezone(0);
            loUno.setEndDate(xml);
        } catch (ParseException e) {
            System.out.println("Error al parsear: "+e.getMessage());
        } catch (DatatypeConfigurationException e) {
            System.out.println("Error Fechas 999: "+e.getMessage());
        }

        loUno.setEndTime(235959);
        
        Date dateStart;
        try {
            dateStart = simpleDateFormat.parse("2018-11-08");
            GregorianCalendar gc=new GregorianCalendar();
            gc.setTime(dateStart);
            XMLGregorianCalendar xml = DatatypeFactory.newInstance().newXMLGregorianCalendar(gc);
            //xml.setTimezone(0);
            loUno.setStartDate(xml);
        } catch (ParseException e) {
            System.out.println("Error al parsear: "+e.getMessage());
        } catch (DatatypeConfigurationException e) {
            System.out.println("Error Fechas 999: "+e.getMessage());
        }
        
        loUno.setStartTime(60000);
        
        filterDateTime.add(loUno);
        
        laFdt.setFilterDateTime(filterDateTime);
        JAXBElement<ArrayOfFilterDateTime> laFilterDateTimes = 
            new JAXBElement<ArrayOfFilterDateTime>(new QName(lsQNameXML, "FilterDateTimes"),ArrayOfFilterDateTime.class,laFdt);
        
        spotListFilter.setFilterDateTimes(laFilterDateTimes);
        
        spotListFilter.setIncludeCopyDetails(false);
        spotListFilter.setIncludeInvoiceInfo(false);
        spotListFilter.setIncludePackages(false);
        spotListFilter.setIncludePremiumCategoryData(false);
        spotListFilter.setIncludePrimary(true);
        spotListFilter.setIncludeProgrammeOrCategory(false);
        spotListFilter.setIncludeSchedulePayments(false);
        spotListFilter.setIncludeSubAreas(true);
        spotListFilter.setInclusiveDiscountRange(false);
        spotListFilter.setInclusivePreemptionRange(false);
        
        spotListFilter.setInteractivity(Interactivity.ALL);                
        
        spotListFilter.setParpNo(0);
        spotListFilter.setPositionInBreak(-1);
        
        ArrayOfint loObjPree = new ArrayOfint();
        List<Integer> laObjsPree = new ArrayList<Integer>();
        //laObjsCa.add(1);
        loObjPree.setInt(laObjsPree);
        JAXBElement<ArrayOfint> laPree = 
            new JAXBElement<ArrayOfint>(new QName(lsQNameXML, "PreemptionCodes"),ArrayOfint.class,loObjPree);
        spotListFilter.setPreemptionCodes(laPree);
        
        spotListFilter.setPreemptionRangeEnd(0);
        spotListFilter.setPreemptionRangeStart(0);
        spotListFilter.setPriceHigh(new Float(0.00));
        spotListFilter.setPriceLow(new Float(0.00));
        spotListFilter.setProductCode(-1);
        spotListFilter.setProgrammeCategoryNumber(-1);
        spotListFilter.setProgrammeNumber(-1);
        spotListFilter.setRatingsHigh(new Float(0.00));
        spotListFilter.setRatingsLow(new Float(0.00));
        spotListFilter.setRegnBreakout(false);
        spotListFilter.setRetrieveCopy(false);
        
        
        ArrayOfint loObjSales = new ArrayOfint();
        List<Integer> laObjsSales = new ArrayList<Integer>();
        laObjsSales.add(1);
        loObjSales.setInt(laObjsSales);
        JAXBElement<ArrayOfint> laSales = 
            new JAXBElement<ArrayOfint>(new QName(lsQNameXML, "BusinessTypes"),ArrayOfint.class,loObjSales);
        spotListFilter.setSalesAreas(laSales);
        
        spotListFilter.setSecondaryDemographicNumber(-3);
        spotListFilter.setSecondaryRatingsSupplier(false);                
        
        ArrayOfint loObjSpotsl = new ArrayOfint();
        List<Integer> laObjsSpotsl = new ArrayList<Integer>();
        //laObjsSales.add(1);
        loObjSpotsl.setInt(laObjsSpotsl);
        JAXBElement<ArrayOfint> laSpotsl = 
            new JAXBElement<ArrayOfint>(new QName(lsQNameXML, "SpotLengths"),ArrayOfint.class,loObjSpotsl);
        spotListFilter.setSpotLengths(laSpotsl);
        
        spotListFilter.setSpotNumber(0);
        
        ArrayOfint loObjSpotsSt = new ArrayOfint();
        List<Integer> laObjsSpotsSt = new ArrayList<Integer>();
        //laObjsSales.add(1);
        loObjSpotsSt.setInt(laObjsSpotsSt);
        JAXBElement<ArrayOfint> laSpotsSt = 
            new JAXBElement<ArrayOfint>(new QName(lsQNameXML, "SpotStatuses"),ArrayOfint.class,loObjSpotsSt);
        spotListFilter.setSpotStatuses(laSpotsSt);
                
        spotListFilter.setTxmnFailData(false);
        spotListFilter.setUntxmdSpotData(false);
        
        System.out.println("SETT SECURITY");
        Map<String, Object> loReqCtx = ((BindingProvider)iLandmarkSpotsSpot).getRequestContext();
        //req_ctx.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, WS_URL);
        Map<String, List<String>> loHeaders = new HashMap<String, List<String>>();
        loHeaders.put("Authorization: Basic", Collections.singletonList("VHJhaW5lZTA3OmI5NDlhNjRmZDU0ODRlNjkxOTFlZmI2MGQ4M2Y3Zjc5MTk1ZWViMjkxMWMzZWI1ODUwYWYxNjA4NDEyMTFmMTg="));
        loHeaders.put("LMK-Environment", Collections.singletonList("1:acetestd"));
        loReqCtx.put(MessageContext.HTTP_REQUEST_HEADERS, loHeaders);
        System.out.println("SETT SECURITY.....OK");
        
        System.out.println("Guardar archivo fisico REQUEST");
        /*try{                        
            StreamResult result =
            new StreamResult(new File("C:\\Users\\Jorge-OMW\\Desktop\\pruebas\\Request-Alex"+getId()+".xml"));
            //transformer.transform(source, result);
            JAXB.marshal(spotListFilter, result);
        }catch(Exception loExo){
            System.out.println("Error al Guardar archivo fisico "+loExo.getMessage());
        }*/
        System.out.println("Llamada a servicio, deshabilitada temporalmente");
        
        try{
            ArrayOfSpot loArrof = iLandmarkSpotsSpot.loadForFilter2(spotListFilter, "MXN");
            System.out.println("Guardar archivo fisico RESPONSE");
            try{                        
                /*StreamResult result =
                new StreamResult(new File("C:\\Users\\Jorge-OMW\\Desktop\\pruebas\\Response-Alex"+getId()+".xml"));
                //transformer.transform(source, result);
                JAXB.marshal(loArrof, result);*/
                System.out.println("Descomponer el RESPONSE");
                List<Spot> laSpots = loArrof.getSpot();
                
                for(Spot loSpot : laSpots){
                    Integer liSpotNumber = loSpot.getSpotNumber();
                }
                
            }catch(Exception loExo){
                System.out.println("Error al Guardar archivo fisico "+loExo.getMessage());
            }
        }catch(Exception loEx){
            System.out.println("Error al consumir WS "+loEx.getMessage());
        }
        
    }

    public static String getId(){
        String     lsResponse = null;
        DateFormat loDf = new SimpleDateFormat("yyyyMMddHHmmssSSS");
        lsResponse = loDf.format(new java.util.Date(System.currentTimeMillis()));
        return lsResponse;
    }
}
